import { default as AlgoSdk } from "algosdk";
import { GridClientConfig } from "../config";
import { BackendStorage } from "../storage";
import { AlgorandAccountAssetsFromAddressModel, AlgorandAccountAssetsFromNameModel, AlgorandAccountCreateModel, AlgorandAccountDeleteModel, AlgorandAccountExistModel, AlgorandAccountGetModel, AlgorandAccountImportModel, AlgorandCreateTransactionModel, AlgorandSignatureModel, AlgorandSignBytesModel, AlgorandTransferModel } from "./models";
declare class Algorand {
    baseUrl: string;
    backendStorage: BackendStorage;
    fileName: string;
    constructor(config: GridClientConfig);
    save(name: string, value: string): Promise<void>;
    _load(): Promise<any[]>;
    list(): Promise<string[]>;
    exist(options: AlgorandAccountExistModel): Promise<boolean>;
    delete(options: AlgorandAccountDeleteModel): Promise<string>;
    create(options: AlgorandAccountCreateModel): Promise<{
        name: string;
        address: string;
        mnemonic: string;
    }>;
    import(options: AlgorandAccountImportModel): Promise<{
        name: string;
        address: string;
        mnemonic: string;
    }>;
    assetsByName(options: AlgorandAccountAssetsFromNameModel): Promise<any>;
    assetsByAddress(options: AlgorandAccountAssetsFromAddressModel): Promise<any>;
    get(options: AlgorandAccountGetModel): Promise<any>;
    sign(options: AlgorandSignatureModel): Promise<{
        txID: string;
        blob: Uint8Array;
    }>;
    signBytes(options: AlgorandSignBytesModel): Promise<string>;
    createTransaction(options: AlgorandCreateTransactionModel): Promise<AlgoSdk.Transaction>;
    transfer(options: AlgorandTransferModel): Promise<any>;
}
export { Algorand as algorand };
//# sourceMappingURL=algorand.d.ts.map