"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.algorand = void 0;
const algosdk_1 = __importDefault(require("algosdk"));
const axios_1 = __importDefault(require("axios"));
const PATH = __importStar(require("path"));
const helpers_1 = require("../helpers");
const expose_1 = require("../helpers/expose");
const storage_1 = require("../storage");
const models_1 = require("./models");
class Algorand {
    baseUrl = "http://node.testnet.algoexplorerapi.io/";
    backendStorage;
    fileName = "algorand.json";
    constructor(config) {
        this.backendStorage = new storage_1.BackendStorage(config.backendStorageType, config.substrateURL, config.mnemonic, config.storeSecret, config.keypairType, config.backendStorage);
    }
    async save(name, value) {
        const [path, data] = await this._load();
        if (data[name]) {
            throw Error(`A wallet with the same name ${name} already exists`);
        }
        await this.backendStorage.update(path, name, value);
    }
    async _load() {
        const path = PATH.join(storage_1.appPath, this.fileName);
        let data = await this.backendStorage.load(path);
        if (!data) {
            data = {};
        }
        return [path, data];
    }
    async list() {
        const [, data] = await this._load();
        return Object.keys(data);
    }
    async exist(options) {
        return (await this.list()).includes(options.name);
    }
    async delete(options) {
        const [path, data] = await this._load();
        if (!data[options.name]) {
            throw Error(`Couldn't find a wallet with name ${options.name}`);
        }
        await this.backendStorage.update(path, options.name, "", storage_1.StorageUpdateAction.delete);
        return "Deleted";
    }
    async create(options) {
        const account = await algosdk_1.default.generateAccount();
        const account_mnemonic = algosdk_1.default.secretKeyToMnemonic(account.sk);
        await this.save(options.name, account_mnemonic);
        return { name: options.name, address: account.addr, mnemonic: account_mnemonic };
    }
    async import(options) {
        const account = await algosdk_1.default.mnemonicToSecretKey(options.mnemonic);
        console.log(account);
        await this.save(options.name, options.mnemonic);
        return { name: options.name, address: account.addr, mnemonic: options.mnemonic };
    }
    async assetsByName(options) {
        const account_mnemonics = await this.get({ name: options.name });
        const account = await algosdk_1.default.mnemonicToSecretKey(account_mnemonics);
        const assets = this.assetsByAddress({ address: account.addr });
        return assets;
    }
    async assetsByAddress(options) {
        const assets = await axios_1.default.get(this.baseUrl + `v2/accounts/${options.address}/`).then(res => res.data);
        return assets;
    }
    async get(options) {
        const [, data] = await this._load();
        return data[options.name];
    }
    async sign(options) {
        const accountMnemonicsFromName = await this.get({ name: options.name });
        const account = await algosdk_1.default.mnemonicToSecretKey(accountMnemonicsFromName);
        const signed_txn = await algosdk_1.default.signTransaction(options.txn, account.sk);
        return signed_txn;
    }
    async signBytes(options) {
        const accountMnemonicsFromName = await this.get({ name: options.name });
        const account = await algosdk_1.default.mnemonicToSecretKey(accountMnemonicsFromName);
        const message = Uint8Array.from(Buffer.from(options.msg, "hex"));
        await algosdk_1.default.signBytes(message, account.sk);
        const messageSent = Buffer.from(message).toString("hex");
        return messageSent;
    }
    async createTransaction(options) {
        const params_fetched = await axios_1.default.get(this.baseUrl + `v2/transactions/params`).then(res => res.data);
        console.log("transaction params fetched");
        const request_params = {
            flatFee: true,
            fee: 1000,
            firstRound: params_fetched["last-round"],
            lastRound: params_fetched["last-round"] + 1000,
            genesisID: params_fetched["genesis-id"],
            genesisHash: params_fetched["genesis-hash"],
        };
        const note = algosdk_1.default.encodeObj(options.text);
        const accountMnemonics = await this.get({ name: options.sender });
        const account = algosdk_1.default.mnemonicToSecretKey(accountMnemonics);
        const txn = algosdk_1.default.makePaymentTxnWithSuggestedParams(account.addr, options.receiver, options.amount, undefined, note, request_params);
        console.log("transaction binary built");
        return txn;
    }
    async transfer(options) {
        const txn = await this.createTransaction({
            sender: options.sender,
            receiver: options.receiver,
            amount: options.amount,
            text: options.text,
        });
        console.log("transaction binary built", txn);
        const signedTxn = await this.sign({ txn: txn, name: options.sender });
        console.log("transaction signed");
        const submitted_txn = await axios_1.default.post(this.baseUrl + `v2/transactions`, signedTxn?.blob);
        return submitted_txn.data;
    }
}
__decorate([
    expose_1.expose,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], Algorand.prototype, "list", null);
__decorate([
    expose_1.expose,
    helpers_1.validateInput,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [models_1.AlgorandAccountExistModel]),
    __metadata("design:returntype", Promise)
], Algorand.prototype, "exist", null);
__decorate([
    expose_1.expose,
    helpers_1.validateInput,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [models_1.AlgorandAccountDeleteModel]),
    __metadata("design:returntype", Promise)
], Algorand.prototype, "delete", null);
__decorate([
    expose_1.expose,
    helpers_1.validateInput,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [models_1.AlgorandAccountCreateModel]),
    __metadata("design:returntype", Promise)
], Algorand.prototype, "create", null);
__decorate([
    expose_1.expose,
    helpers_1.validateInput,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [models_1.AlgorandAccountImportModel]),
    __metadata("design:returntype", Promise)
], Algorand.prototype, "import", null);
__decorate([
    expose_1.expose,
    helpers_1.validateInput,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [models_1.AlgorandAccountAssetsFromNameModel]),
    __metadata("design:returntype", Promise)
], Algorand.prototype, "assetsByName", null);
__decorate([
    expose_1.expose,
    helpers_1.validateInput,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [models_1.AlgorandAccountAssetsFromAddressModel]),
    __metadata("design:returntype", Promise)
], Algorand.prototype, "assetsByAddress", null);
__decorate([
    expose_1.expose,
    helpers_1.validateInput,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [models_1.AlgorandAccountGetModel]),
    __metadata("design:returntype", Promise)
], Algorand.prototype, "get", null);
__decorate([
    expose_1.expose,
    helpers_1.validateInput,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [models_1.AlgorandSignBytesModel]),
    __metadata("design:returntype", Promise)
], Algorand.prototype, "signBytes", null);
__decorate([
    helpers_1.validateInput,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [models_1.AlgorandCreateTransactionModel]),
    __metadata("design:returntype", Promise)
], Algorand.prototype, "createTransaction", null);
__decorate([
    expose_1.expose,
    helpers_1.validateInput,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [models_1.AlgorandTransferModel]),
    __metadata("design:returntype", Promise)
], Algorand.prototype, "transfer", null);
exports.algorand = Algorand;
