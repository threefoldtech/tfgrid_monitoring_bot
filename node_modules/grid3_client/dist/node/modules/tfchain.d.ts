import { GridClientConfig } from "../config";
import { BackendStorage } from "../storage/backend";
import { KeypairType } from "../zos";
import { TfchainCreateModel, TfchainWalletBalanceByAddressModel, TfchainWalletBalanceByNameModel, TfchainWalletDeleteModel, TfchainWalletGetModel, TfchainWalletImportModel, TfchainWalletTransferModel, WalletMessageSignModel } from "./models";
declare class TFChain {
    fileName: string;
    backendStorage: BackendStorage;
    substrateURL: string;
    mnemonic: string;
    storeSecret: string;
    keypairType: KeypairType;
    network: string;
    constructor(config: GridClientConfig);
    getPath(): string;
    _load(): Promise<any[]>;
    save(name: string, mnemonic: string): Promise<void>;
    import(options: TfchainWalletImportModel): Promise<void>;
    getMnemonics(name: string): Promise<any>;
    get(options: TfchainWalletGetModel): Promise<any>;
    update(options: TfchainWalletImportModel): Promise<void>;
    exist(options: TfchainWalletGetModel): Promise<boolean>;
    list(): Promise<string[]>;
    balanceByName(options: TfchainWalletBalanceByNameModel): Promise<Record<string, number>>;
    balanceByAddress(options: TfchainWalletBalanceByAddressModel): Promise<Record<string, number>>;
    transfer(options: TfchainWalletTransferModel): Promise<void>;
    delete(options: TfchainWalletDeleteModel): Promise<string>;
    createAccount(options: TfchainCreateModel): Promise<{
        mnemonics: string;
        twinId: any;
    }>;
    sign(options: WalletMessageSignModel): Promise<string>;
}
export { TFChain as tfchain };
//# sourceMappingURL=tfchain.d.ts.map