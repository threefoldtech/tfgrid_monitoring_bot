"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.tfchain = void 0;
const keyring_1 = require("@polkadot/keyring");
const axios_1 = __importDefault(require("axios"));
const bip39_1 = require("bip39");
const buffer_1 = require("buffer");
const md5_1 = __importDefault(require("crypto-js/md5"));
const exponential_backoff_1 = require("exponential-backoff");
const PATH = __importStar(require("path"));
const clients_1 = require("../clients");
const expose_1 = require("../helpers/expose");
const validator_1 = require("../helpers/validator");
const backend_1 = require("../storage/backend");
const models_1 = require("./models");
class TFChain {
    fileName = "tfchain.json";
    backendStorage;
    substrateURL;
    mnemonic;
    storeSecret;
    keypairType;
    network;
    constructor(config) {
        this.backendStorage = new backend_1.BackendStorage(config.backendStorageType, config.substrateURL, config.mnemonic, config.storeSecret, config.keypairType);
        this.substrateURL = config.substrateURL;
        this.mnemonic = config.mnemonic;
        this.storeSecret = config.storeSecret;
        this.keypairType = config.keypairType;
        this.network = config.network;
    }
    getPath() {
        return PATH.join(backend_1.appPath, this.fileName);
    }
    //loading
    async _load() {
        const path = this.getPath();
        let data = await this.backendStorage.load(path);
        if (!data) {
            data = {};
        }
        return [path, data];
    }
    async save(name, mnemonic) {
        const [path, data] = await this._load();
        if (data[name]) {
            throw Error(`An account with the same name ${name} already exists`);
        }
        await this.backendStorage.update(path, name, mnemonic);
    }
    async import(options) {
        const client = new clients_1.TFClient(this.substrateURL, options.mnemonics, this.storeSecret, this.keypairType);
        await client.connect();
        if (!client.isConnected()) {
            throw Error(`could not connect account with given mnemonics`);
        }
        await this.save(options.name, client.mnemonic);
    }
    async getMnemonics(name) {
        const [, data] = await this._load();
        if (!data[name]) {
            throw Error(`An account with the name ${name} does not exist.`);
        }
        return data[name];
    }
    async get(options) {
        const mnemonics = await this.getMnemonics(options.name);
        const client = new clients_1.TFClient(this.substrateURL, mnemonics, this.storeSecret, this.keypairType);
        await client.connect();
        return client.client.address;
    }
    async update(options) {
        if (!(await this.exist(options))) {
            throw Error(`Couldn't find an account with name ${options.name}`);
        }
        const client = new clients_1.TFClient(this.substrateURL, options.mnemonics, this.storeSecret, this.keypairType);
        await client.connect();
        try {
            const path = this.getPath();
            await this.backendStorage.update(path, options.name, options.mnemonics, backend_1.StorageUpdateAction.add);
        }
        catch (e) {
            throw Error(`could not update account mnemonics: ${e}`);
        }
    }
    async exist(options) {
        return (await this.list()).includes(options.name);
    }
    async list() {
        const [, data] = await this._load();
        return Object.keys(data);
    }
    async balanceByName(options) {
        if (!(await this.exist(options))) {
            throw Error(`Couldn't find an account with name ${options.name}`);
        }
        const mnemonics = await this.getMnemonics(options.name);
        const client = new clients_1.TFClient(this.substrateURL, mnemonics, this.storeSecret, this.keypairType);
        const accountBalance = new clients_1.Balance(client);
        return await accountBalance.get(client.client.address);
    }
    async balanceByAddress(options) {
        const client = new clients_1.TFClient(this.substrateURL, this.mnemonic, this.storeSecret, this.keypairType);
        await client.connect();
        const accountBalance = new clients_1.Balance(client);
        return await accountBalance.get(options.address);
    }
    async transfer(options) {
        const mnemonics = await this.getMnemonics(options.name);
        const sourceClient = new clients_1.TFClient(this.substrateURL, mnemonics, this.storeSecret, this.keypairType);
        const accountBalance = new clients_1.Balance(sourceClient);
        try {
            await accountBalance.transfer(options.target_address, options.amount);
        }
        catch (e) {
            throw Error(`Could not complete transfer transaction: ${e}`);
        }
    }
    async delete(options) {
        if (!(await this.exist(options))) {
            throw Error(`Couldn't find an account with name ${options.name}`);
        }
        const path = this.getPath();
        await this.backendStorage.update(path, options.name, "", backend_1.StorageUpdateAction.delete);
        return "Deleted";
    }
    async createAccount(options) {
        if (await this.exist({ name: options.name })) {
            throw Error(`An account with the same name ${options.name} already exists`);
        }
        const mnemonics = (0, bip39_1.generateMnemonic)();
        const client = new clients_1.TFClient(this.substrateURL, mnemonics, this.storeSecret, this.keypairType);
        await client.connect();
        await axios_1.default.post(`https://activation.${this.network}.grid.tf/activation/activate`, {
            substrateAccountID: client.client.address,
        });
        await (0, exponential_backoff_1.backOff)(() => client.client.acceptTermsAndConditions("https://library.threefold.me/info/legal/#/", ""), {
            delayFirstAttempt: true,
            startingDelay: 1000,
            maxDelay: 5000,
            timeMultiple: 1.25,
        });
        const ret = await client.twins.create(options.ip);
        await this.import({ name: options.name, mnemonics });
        return { mnemonics, twinId: ret.id };
    }
    async sign(options) {
        const mnemonics = await this.getMnemonics(options.name);
        const hash = (0, md5_1.default)(options.message);
        const message_bytes = Uint8Array.from(buffer_1.Buffer.from(hash.toString(), "hex"));
        const keyr = new keyring_1.Keyring({ type: this.keypairType });
        const key = keyr.addFromMnemonic(mnemonics);
        const signed = key.sign(message_bytes);
        return buffer_1.Buffer.from(signed).toString("hex");
    }
}
__decorate([
    expose_1.expose,
    validator_1.validateInput,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [models_1.TfchainWalletImportModel]),
    __metadata("design:returntype", Promise)
], TFChain.prototype, "import", null);
__decorate([
    expose_1.expose,
    validator_1.validateInput,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [models_1.TfchainWalletGetModel]),
    __metadata("design:returntype", Promise)
], TFChain.prototype, "get", null);
__decorate([
    expose_1.expose,
    validator_1.validateInput,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [models_1.TfchainWalletImportModel]),
    __metadata("design:returntype", Promise)
], TFChain.prototype, "update", null);
__decorate([
    expose_1.expose,
    validator_1.validateInput,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [models_1.TfchainWalletGetModel]),
    __metadata("design:returntype", Promise)
], TFChain.prototype, "exist", null);
__decorate([
    expose_1.expose,
    validator_1.validateInput,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], TFChain.prototype, "list", null);
__decorate([
    expose_1.expose,
    validator_1.validateInput,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [models_1.TfchainWalletBalanceByNameModel]),
    __metadata("design:returntype", Promise)
], TFChain.prototype, "balanceByName", null);
__decorate([
    expose_1.expose,
    validator_1.validateInput,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [models_1.TfchainWalletBalanceByAddressModel]),
    __metadata("design:returntype", Promise)
], TFChain.prototype, "balanceByAddress", null);
__decorate([
    expose_1.expose,
    validator_1.validateInput,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [models_1.TfchainWalletTransferModel]),
    __metadata("design:returntype", Promise)
], TFChain.prototype, "transfer", null);
__decorate([
    expose_1.expose,
    validator_1.validateInput,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [models_1.TfchainWalletDeleteModel]),
    __metadata("design:returntype", Promise)
], TFChain.prototype, "delete", null);
exports.tfchain = TFChain;
